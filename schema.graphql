### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Company {
  description: String!
  employee(after: EmployeeWhereUniqueInput, before: EmployeeWhereUniqueInput, first: Int, last: Int): [Employee!]!
  id: Int!
  name: String!
  symbol: String!
}

input CompanyCreateInput {
  description: String!
  employee: EmployeeCreateNestedManyWithoutCompanyInput
  name: String!
  symbol: String!
}

input CompanyUpdateInput {
  description: StringFieldUpdateOperationsInput
  employee: EmployeeUpdateManyWithoutCompanyInput
  name: StringFieldUpdateOperationsInput
  symbol: StringFieldUpdateOperationsInput
}

input CompanyWhereUniqueInput {
  id: Int
}

type Employee {
  age: Int!
  id: Int!
  name: String!
}

input EmployeeCreateNestedManyWithoutCompanyInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutCompanyInput!]
  create: [EmployeeCreateWithoutCompanyInput!]
}

input EmployeeCreateOrConnectWithoutCompanyInput {
  create: EmployeeCreateWithoutCompanyInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeCreateWithoutCompanyInput {
  age: Int!
  name: String!
}

input EmployeeScalarWhereInput {
  AND: [EmployeeScalarWhereInput!]
  NOT: [EmployeeScalarWhereInput!]
  OR: [EmployeeScalarWhereInput!]
  age: IntFilter
  companyId: IntNullableFilter
  id: IntFilter
  name: StringFilter
}

input EmployeeUpdateManyMutationInput {
  age: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input EmployeeUpdateManyWithWhereWithoutCompanyInput {
  data: EmployeeUpdateManyMutationInput!
  where: EmployeeScalarWhereInput!
}

input EmployeeUpdateManyWithoutCompanyInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutCompanyInput!]
  create: [EmployeeCreateWithoutCompanyInput!]
  delete: [EmployeeWhereUniqueInput!]
  deleteMany: [EmployeeScalarWhereInput!]
  disconnect: [EmployeeWhereUniqueInput!]
  set: [EmployeeWhereUniqueInput!]
  update: [EmployeeUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [EmployeeUpdateManyWithWhereWithoutCompanyInput!]
  upsert: [EmployeeUpsertWithWhereUniqueWithoutCompanyInput!]
}

input EmployeeUpdateWithWhereUniqueWithoutCompanyInput {
  data: EmployeeUpdateWithoutCompanyInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeUpdateWithoutCompanyInput {
  age: IntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input EmployeeUpsertWithWhereUniqueWithoutCompanyInput {
  create: EmployeeCreateWithoutCompanyInput!
  update: EmployeeUpdateWithoutCompanyInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeWhereUniqueInput {
  id: Int
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  createOneCompany(data: CompanyCreateInput!): Company!
  deleteOneCompany(where: CompanyWhereUniqueInput!): Company
  updateOneCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  companies(after: CompanyWhereUniqueInput, before: CompanyWhereUniqueInput, first: Int, last: Int): [Company!]!
  company(where: CompanyWhereUniqueInput!): Company
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}
