/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "./src/context"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CompanyCreateInput: { // input type
    description?: string | null; // String
    employee?: NexusGenInputs['EmployeeCreateNestedOneWithoutCompanyInput'] | null; // EmployeeCreateNestedOneWithoutCompanyInput
    name?: string | null; // String
    symbol?: string | null; // String
  }
  CompanyUpdateInput: { // input type
    description?: NexusGenInputs['NullableStringFieldUpdateOperationsInput'] | null; // NullableStringFieldUpdateOperationsInput
    employee?: NexusGenInputs['EmployeeUpdateOneWithoutCompanyInput'] | null; // EmployeeUpdateOneWithoutCompanyInput
    name?: NexusGenInputs['NullableStringFieldUpdateOperationsInput'] | null; // NullableStringFieldUpdateOperationsInput
    symbol?: NexusGenInputs['NullableStringFieldUpdateOperationsInput'] | null; // NullableStringFieldUpdateOperationsInput
  }
  CompanyWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  EmployeeCreateNestedOneWithoutCompanyInput: { // input type
    connect?: NexusGenInputs['EmployeeWhereUniqueInput'] | null; // EmployeeWhereUniqueInput
    connectOrCreate?: NexusGenInputs['EmployeeCreateOrConnectWithoutCompanyInput'] | null; // EmployeeCreateOrConnectWithoutCompanyInput
    create?: NexusGenInputs['EmployeeCreateWithoutCompanyInput'] | null; // EmployeeCreateWithoutCompanyInput
  }
  EmployeeCreateOrConnectWithoutCompanyInput: { // input type
    create: NexusGenInputs['EmployeeCreateWithoutCompanyInput']; // EmployeeCreateWithoutCompanyInput!
    where: NexusGenInputs['EmployeeWhereUniqueInput']; // EmployeeWhereUniqueInput!
  }
  EmployeeCreateWithoutCompanyInput: { // input type
    age: number; // Int!
    name: string; // String!
  }
  EmployeeUpdateOneWithoutCompanyInput: { // input type
    connect?: NexusGenInputs['EmployeeWhereUniqueInput'] | null; // EmployeeWhereUniqueInput
    connectOrCreate?: NexusGenInputs['EmployeeCreateOrConnectWithoutCompanyInput'] | null; // EmployeeCreateOrConnectWithoutCompanyInput
    create?: NexusGenInputs['EmployeeCreateWithoutCompanyInput'] | null; // EmployeeCreateWithoutCompanyInput
    delete?: boolean | null; // Boolean
    disconnect?: boolean | null; // Boolean
    update?: NexusGenInputs['EmployeeUpdateWithoutCompanyInput'] | null; // EmployeeUpdateWithoutCompanyInput
    upsert?: NexusGenInputs['EmployeeUpsertWithoutCompanyInput'] | null; // EmployeeUpsertWithoutCompanyInput
  }
  EmployeeUpdateWithoutCompanyInput: { // input type
    age?: NexusGenInputs['IntFieldUpdateOperationsInput'] | null; // IntFieldUpdateOperationsInput
    name?: NexusGenInputs['StringFieldUpdateOperationsInput'] | null; // StringFieldUpdateOperationsInput
  }
  EmployeeUpsertWithoutCompanyInput: { // input type
    create: NexusGenInputs['EmployeeCreateWithoutCompanyInput']; // EmployeeCreateWithoutCompanyInput!
    update: NexusGenInputs['EmployeeUpdateWithoutCompanyInput']; // EmployeeUpdateWithoutCompanyInput!
  }
  EmployeeWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  IntFieldUpdateOperationsInput: { // input type
    decrement?: number | null; // Int
    divide?: number | null; // Int
    increment?: number | null; // Int
    multiply?: number | null; // Int
    set?: number | null; // Int
  }
  NullableStringFieldUpdateOperationsInput: { // input type
    set?: string | null; // String
  }
  StringFieldUpdateOperationsInput: { // input type
    set?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Company: { // root type
    description?: string | null; // String
    id: number; // Int!
    name?: string | null; // String
    symbol?: string | null; // String
  }
  Employee: { // root type
    age: number; // Int!
    id: number; // Int!
    name: string; // String!
  }
  Mutation: {};
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Company: { // field return type
    description: string | null; // String
    employee: NexusGenRootTypes['Employee'] | null; // Employee
    id: number; // Int!
    name: string | null; // String
    symbol: string | null; // String
  }
  Employee: { // field return type
    age: number; // Int!
    id: number; // Int!
    name: string; // String!
  }
  Mutation: { // field return type
    createOneCompany: NexusGenRootTypes['Company']; // Company!
    deleteOneCompany: NexusGenRootTypes['Company'] | null; // Company
    updateOneCompany: NexusGenRootTypes['Company'] | null; // Company
  }
  Query: { // field return type
    companies: NexusGenRootTypes['Company'][]; // [Company!]!
    company: NexusGenRootTypes['Company'] | null; // Company
  }
}

export interface NexusGenFieldTypeNames {
  Company: { // field return type name
    description: 'String'
    employee: 'Employee'
    id: 'Int'
    name: 'String'
    symbol: 'String'
  }
  Employee: { // field return type name
    age: 'Int'
    id: 'Int'
    name: 'String'
  }
  Mutation: { // field return type name
    createOneCompany: 'Company'
    deleteOneCompany: 'Company'
    updateOneCompany: 'Company'
  }
  Query: { // field return type name
    companies: 'Company'
    company: 'Company'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createOneCompany: { // args
      data: NexusGenInputs['CompanyCreateInput']; // CompanyCreateInput!
    }
    deleteOneCompany: { // args
      where: NexusGenInputs['CompanyWhereUniqueInput']; // CompanyWhereUniqueInput!
    }
    updateOneCompany: { // args
      data: NexusGenInputs['CompanyUpdateInput']; // CompanyUpdateInput!
      where: NexusGenInputs['CompanyWhereUniqueInput']; // CompanyWhereUniqueInput!
    }
  }
  Query: {
    companies: { // args
      after?: NexusGenInputs['CompanyWhereUniqueInput'] | null; // CompanyWhereUniqueInput
      before?: NexusGenInputs['CompanyWhereUniqueInput'] | null; // CompanyWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    company: { // args
      where: NexusGenInputs['CompanyWhereUniqueInput']; // CompanyWhereUniqueInput!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}